from flask import Flask, render_template, Response
import cv2
import sys
import time
import pickle

for i in range(10):
    try:
        cap = cv2.VideoCapture(i)
    except:
        pass
    else:
        print("worked on: "+str(i))
        break

if not cap.isOpened():
    sys.exit()

app = Flask(__name__, template_folder="templates")

with open('variables.pkl', 'rb') as f:
    variables = pickle.load(f, encoding='bytes')
    night_mode = variables['night_mode']
print(night_mode)

def gen_frames():
    while True:
        time.sleep(1./10)
        ret, frame = cap.read()
        if not ret:
            break

        with open('variables.pkl', 'rb') as f:
                variables = pickle.load(f, encoding='bytes')
                night_mode = variables['night_mode']

        if night_mode:
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            equalized = cv2.equalizeHist(gray)
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
            adaptive = clahe.apply(gray)
            denoised = cv2.fastNlMeansDenoising(adaptive, None, h=2)
            frame = adaptive
        # Convert the frame to bytes
        frame_bytes = cv2.imencode('.jpg', frame)[1].tobytes()
        # Yield the bytes as an HTTP response
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video_feed')
def video_feed():
    # Return the response generated by the gen_frames() generator function
    return Response(gen_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

#@app.route('/toggle_night')
def toggle_night():
    with open('variables.pkl', 'rb') as f:
        variables = pickle.load(f, encoding='bytes')
        night_mode = variables['night_mode']

    night_mode = not night_mode
    with open('variables.pkl', 'wb') as f:
        pickle.dump({'night_mode': night_mode}, f)
    return "<h1>Set night to "+str(night_mode)+"</h1>"

if __name__ == '__main__':
    app.run(host="0.0.0.0")
